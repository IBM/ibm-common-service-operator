apiVersion: v1
kind: ConfigMap
metadata:
  name: keycloak-br-configmap
  labels:
    foundationservices.cloudpak.ibm.com: keycloak-data
data:
  br_keycloak.sh: |
    #!/usr/bin/env bash

    # Licensed Materials - Property of IBM
    # Copyright IBM Corporation 2023. All Rights Reserved
    # US Government Users Restricted Rights -
    # Use, duplication or disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
    #
    # This is an internal component, bundled with an official IBM product.
    # Please refer to that particular license for additional information.

    # ---------- Command arguments ----------

    set -o errtrace
    set -o errexit

    MODE=$1
    KEYCLOAK_NAMESPACE=$2
    OPERATOR_NAMESPACE=$3
    if [[ -z $OPERATOR_NAMESPACE ]]; then
        OPERATOR_NAMESPACE=$KEYCLOAK_NAMESPACE
    fi

    BACKUP_DIR=/keycloak/keycloak-backup

    function main {
        if [[ $MODE == "backup" ]]; then
            info "Mode set to backup, beginning backup process."
            backup
            success "Backup completed successfully."
        else
            info "Mode is set to restore, beginning restore process."
            restore
            success "Restore completed successfully."
        fi
    }

    function backup {
        mkdir -p $BACKUP_DIR/database
        CNPG_PRIMARY_POD=`oc get cluster.postgresql.k8s.enterprisedb.io keycloak-edb-cluster -o jsonpath="{.status.currentPrimary}" -n $KEYCLOAK_NAMESPACE` && \
        oc -n $KEYCLOAK_NAMESPACE exec -t $CNPG_PRIMARY_POD -c postgres -- mkdir -p /run/keycloak_backup && \
        oc -n $KEYCLOAK_NAMESPACE exec -t $CNPG_PRIMARY_POD -c postgres -- pg_dump -v --username=postgres --dbname=keycloak -f /run/keycloak_backup/keycloak_db_backup.dump

        #Move backup to backup location
        oc cp $KEYCLOAK_NAMESPACE/$CNPG_PRIMARY_POD:/run/keycloak_backup/keycloak_db_backup.dump $BACKUP_DIR/database/keycloak_db_backup.dump
    }

    function restore {
        info "Prepping database..."
        
        keycloak_operator_deploy=(oc get deploy -n $OPERATOR_NAMESPACE | grep rhbk-operator || echo "missing")
        keycloak_replicas=(oc get sts cs-keycloak -n ${KEYCLOAK_NAMESPACE} -o=jsonpath='{.spec.replicas}')
        if [[ $keycloak_operator_rs != "missing" ]]; then
            info "Scaling down keycloak operator and statefulset."
            oc scale deploy rhbk-operator --replicas=0 -n $OPERATOR_NAMESPACE
            oc scale sts cs-keycloak --replicas=0 -n $KEYCLOAK_NAMESPACE
            info "Keycloak scaled down."
        else
            error "Keycloak operator missing from namespace $OPERATOR_NAMESPACE. Re-run script with correct namespace parameters."
        fi

        #waiting for deployments to be cleaned up after scaling down
        sleep 10
        sts_clear=$(oc get sts -n $KEYCLOAK_NAMESPACE | grep "cs-keycloak" | awk '{print $2}' | grep -v "0/0" || echo clear)
        while [[ $sts_clear != "clear" ]];
        do
            sleep 10
            if [[ $sts_clear != "clear" ]]; then
                info "Waiting on statefulset cs-keycloak pods to clean up..."
                sts_clear=$(oc get sts -n $KEYCLOAK_NAMESPACE | grep "cs-keycloak" | awk '{print $2}' | grep -v "0/0" || echo clear)
            else
                info "Statefulset cs-keycloak successfully scaled down. Moving on..."
            fi
        done

        CNPG_PRIMARY_POD=`oc get cluster.postgresql.k8s.enterprisedb.io keycloak-edb-cluster -o jsonpath="{.status.currentPrimary}" -n $KEYCLOAK_NAMESPACE` && oc -n $KEYCLOAK_NAMESPACE exec -t $CNPG_PRIMARY_POD -c postgres -- psql -U postgres -c "DROP DATABASE IF EXISTS keycloak;" -c "CREATE DATABASE keycloak;" -c "GRANT CONNECT ON DATABASE keycloak TO public;" -c "ALTER DATABASE keycloak OWNER TO postgres;" -c "GRANT ALL PRIVILEGES ON DATABASE keycloak to postgres;"
        CNPG_PRIMARY_POD=`oc get cluster.postgresql.k8s.enterprisedb.io keycloak-edb-cluster -o jsonpath="{.status.currentPrimary}"`
        oc exec $CNPG_PRIMARY_POD -n $KEYCLOAK_NAMESPACE -- mkdir -p /run/keycloak_backup
        oc cp $BACKUP_DIR/database/keycloak_db_backup.dump $KEYCLOAK_NAMESPACE/$CNPG_PRIMARY_POD:/run/keycloak_backup/keycloak_db_backup.dump
        oc -n $KEYCLOAK_NAMESPACE exec -t $CNPG_PRIMARY_POD -c postgres -- psql -U postgres -c "\list" -c "\dn" -c "\du"
        oc -n $KEYCLOAK_NAMESPACE exec -t $CNPG_PRIMARY_POD -c postgres -- psql -U postgres -d keycloak -f /run/keycloak_backup/keycloak_db_backup.dump
        oc -n $KEYCLOAK_NAMESPACE exec -t $CNPG_PRIMARY_POD -c postgres -- psql -U postgres -c "\list" -c "\dn" -c "\du"
        
        oc scale deploy rhbk-operator --replicas=$keycloak_replicas -n $KEYCLOAK_NAMESPACE
        info "Keycloak scaled up."
    }

    function msg() {
        printf '%b\n' "$1"
    }

    function success() {
        msg "\33[32m[✔] ${1}\33[0m"
    }

    function warning() {
        msg "\33[33m[✗] ${1}\33[0m"
    }

    function error() {
        msg "\33[31m[✘] ${1}\33[0m"
        exit 1
    }

    function title() {
        msg "\33[34m# ${1}\33[0m"
    }

    function info() {
        msg "[INFO] ${1}"
    }

    main $*
