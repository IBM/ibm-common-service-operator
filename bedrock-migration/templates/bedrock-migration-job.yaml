apiVersion: batch/v1
kind: Job
metadata:
  name: bedrock-migration-job-{{ .Chart.AppVersion }}
  namespace: {{ .Values.global.operatorNamespace }}
  annotations:
    "helm.sh/hook-delete-policy": before-hook-creation
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "0"
spec:
  template:
    spec:
      containers:
      - name: bedrock-migration-job
        #should we be using our own image or the cpd image? I vote our own
        # image: '{{ .Values.global.imagePullPrefix }}/{{ .Values.global.migrationJobImgName }}@{{ .Values.global.migrationJobImgDigest }}'
        image: icr.io/cpopen/cpfs/cpfs-utils:4.6.7
        command:
          - bash
          - -c
          - |
            operatorNamespace={{ .Values.global.operatorNamespace }}
            servicesNamespace={{ .Values.global.instanceNamespace }}
            namespaces=$(oc get cm namespace-scope -n $operatorNamespace -o jsonpath="{.data.namespaces}")

            nssSub=$(oc get subscription.operators.coreos.com -n "$operatorNamespace" -o jsonpath="{.items[?(@.spec.name=='ibm-namespace-scope-operator')].metadata.name}")
            nssCSV=$(oc get --ignore-not-found sub $nssSub -n $operatorNamespace -o jsonpath='{.status.currentCSV}')
            nssVersion=$(oc get --ignore-not-found csv $nssCSV -n $operatorNamespace -o jsonpath='{.spec.version}')

            csSub=$(oc get subscription.operators.coreos.com -n "$operatorNamespace" -o jsonpath="{.items[?(@.spec.name=='ibm-common-service-operator')].metadata.name}")
            csCSV=$(oc get --ignore-not-found sub $csSub -n $operatorNamespace -o jsonpath='{.status.currentCSV}')
            csVersion=$(oc get --ignore-not-found csv $csCSV -n $operatorNamespace -o jsonpath='{.spec.version}')

            odlmSub=$(oc get subscription.operators.coreos.com -n "$operatorNamespace" -o jsonpath="{.items[?(@.spec.name=='ibm-odlm')].metadata.name}")
            odlmCSV=$(oc get --ignore-not-found sub $odlmSub -n $operatorNamespace -o jsonpath='{.status.currentCSV}')
            odlmVersion=$(oc get --ignore-not-found csv $odlmCSV -n $operatorNamespace -o jsonpath='{.spec.version}')

            oc delete --ignore-not-found csv $csCSV -n $operatorNamespace && oc delete --ignore-not-found sub $csSub -n $operatorNamespace
            oc delete --ignore-not-found csv $nssCSV -n $operatorNamespace && oc delete --ignore-not-found sub $nssSub -n $operatorNamespace
            oc delete --ignore-not-found csv $odlmCSV -n $operatorNamespace && oc delete --ignore-not-found sub $odlmSub -n $operatorNamespace
            
            {{- if .Values.imEnabled }}
            iamSub=$(oc get subscription.operators.coreos.com -n "$operatorNamespace" -o jsonpath="{.items[?(@.spec.name=='ibm-iam-operator')].metadata.name}")
            iamCSV=$(oc get --ignore-not-found sub $iamSub -n $operatorNamespace -o jsonpath='{.status.currentCSV}')
            uiSub=$(oc get subscription.operators.coreos.com -n "$operatorNamespace" -o jsonpath="{.items[?(@.spec.name=='ibm-commonui-operator-app')].metadata.name}")
            uiCSV=$(oc get --ignore-not-found sub $uiSub -n $operatorNamespace -o jsonpath='{.status.currentCSV}')
            edbSub=$(oc get subscription.operators.coreos.com -n "$operatorNamespace" -o jsonpath="{.items[?(@.spec.name=='cloud-native-postgresql')].metadata.name}")
            edbCSV=$(oc get --ignore-not-found sub $edbSub -n $operatorNamespace -o jsonpath='{.status.currentCSV}')
            oc delete --ignore-not-found csv $iamCSV -n $operatorNamespace && oc delete --ignore-not-found sub $iamSub -n $operatorNamespace
            oc delete --ignore-not-found csv $uiCSV -n $operatorNamespace && oc delete --ignore-not-found sub $uiSub -n $operatorNamespace
            oc delete --ignore-not-found csv $edbCSV -n $operatorNamespace && oc delete --ignore-not-found sub $edbSub -n $operatorNamespace
            oc delete --ignore-not-found sa postgresql-operator-manager edb-license-sa -n $operatorNamespace
            oc delete --ignore-not-found sa ibm-iam-operand-restricted ibm-commonui-operand common-service-db -n $servicesNamespace
            oc delete --ignore-not-found role edb-license-role -n $operatorNamespace
            oc delete --ignore-not-found job create-postgres-license-config -n $operatorNamespace
            {{- end }}

            #loop for removing roles from services and tethered namespace
            for ns in ${namespaces//,/ }; do
                roles=""
                #get cs operator roles
                roles="${roles} $(oc get roles -n $ns | grep ibm-common-service-op | awk '{print $1}' | tr "\n" " ")"
                #get odlm roles
                roles="${roles} $(oc get roles -n $ns | grep operand-deployment-l | awk '{print $1}' | tr "\n" " ")"
                {{- if .Values.imEnabled }}
                #get iam roles
                roles="${roles} $(oc get roles -n $ns | grep ibm-iam | awk '{print $1}' | tr "\n" " ")"
                #get ui roles
                roles="${roles} $(oc get roles -n $ns | grep ibm-commonui | awk '{print $1}' | tr "\n" " ")"
                #get edb roles
                roles="${roles} $(oc get roles -n $ns | grep postgresql-operator-controller-manager | awk '{print $1}' | tr "\n" " ")"
                roles="${roles} $(oc get roles -n $ns | grep cloud-native-postgresql | awk '{print $1}' | tr "\n" " ")"
                roles="${roles} $(oc get roles -n $ns | grep common-service-db | awk '{print $1}' | tr "\n" " ")"
                if [[ $ns != $servicesNamespace ]]; then
                    edbSA=$(oc get sa -n $ns --ignore-not-found | grep postgresql-operator-controller-manager | awk '{print $1}' | tr "\n" " ")
                    oc delete sa $edbSA -n $ns --ignore-not-found
                fi
                {{- end }}
                #get nss roles?
                echo "${roles}"

                oc delete role $roles -n $ns --ignore-not-found
                oc delete rolebindings $roles -n $ns --ignore-not-found
            done
      restartPolicy: Never
      serviceAccount: bedrock-migration-job-sa
      imagePullSecrets:
      - name: {{ .Values.global.imagePullSecret }}
